package main

import (
	"fmt"
	"flag"
	"strings"
	"strconv"
	load "kvm-manager/load"
	local "kvm-manager/local"
)


var command string
var framework string
var host string
var method string
var iso string
var templates string
var path string
var source string
var machine string
var snapshot string 
var playbook string

func init(){
	flag.StringVar(&command,"c","","123")
	flag.StringVar(&framework,"framework","","123")
	flag.StringVar(&host,"host","","host")
	flag.StringVar(&method,"method","","创建方法")
	flag.StringVar(&iso,"iso","","新装选择的iso")
	flag.StringVar(&templates,"templates","","选择现有的模板")
	flag.StringVar(&path,"path","","磁盘安装位置")
	flag.StringVar(&machine,"machine","","新主机名称")
	flag.StringVar(&snapshot,"snapshot","","快照名称")
	flag.StringVar(&source,"source","","选择哪个安装源")
	
}

func main(){
	flag.Parse()
	if command == "help"{
		fmt.Printf("\n")
		fmt.Printf("kvm manager instructions : \n")
		fmt.Printf("-c help : Display help content \n")
		fmt.Printf(" \n")
		fmt.Printf("-c source-list : Display of all available physical resource status from properties file\n")
		fmt.Printf(" \n")
		fmt.Printf("Generate clone hosts using existing images\n")
		fmt.Printf("./kmanager -framework x86 -host 10.30.0.13 -method clone -path /ssd -source 0 -machine test_uos\n")
		fmt.Printf("The meaning is : Select a machine with an IP of 0.13 from the x86 architecture, use cloning method,\n")
		fmt.Printf("and choose the first (0) image for replication. The name of the new host is test_uos. \n")
		fmt.Printf("Detail :  \n")
		fmt.Printf("-framework : choose the build framework , the arguments is x86 or arm \n")
		fmt.Printf("when user choose a framework by input that kmanager will judge the host is in list or not\n")
		fmt.Printf("-host : the host which you want to generate the new machine\n")
		fmt.Printf("the host is list in source-list\n")
		fmt.Printf("-method : Choose an installation method , the arguments is NEW or clone \n")
		fmt.Printf("NEW means create a blank disk image then install a new system by iso (Currently not completed)\n")
		fmt.Printf("clone means copy from a exist image which you selected \n")
		fmt.Printf("-path : the path which you want the new machine (Do not pay attention when using clones)\n")
		fmt.Printf("the path is list in source-list \n")
		fmt.Printf("-source : the iso file or the templates file which you can select (Do not pay attention when using clones)\n")
		fmt.Printf("the file is different from x86 framework and arm framework \n")
		fmt.Printf("\n")
		fmt.Printf("Here's how to control a virtual host :  \n")
		fmt.Printf("1 List all running virtual machines on the specified physical machine :\n")
		fmt.Printf("./kmanager -c host-list -host hostIP \n")
		fmt.Printf("2 Start a virtual machine on a specified physical machine\n")
		fmt.Printf("./kmanager -c host-start -host hostIP -machine hostName\n")
		fmt.Printf("3 Stop a virtual machine on a specified physical machine\n")
		fmt.Printf("./kmanager -c host-stop -host hostIP -machine hostName\n")
		fmt.Printf("4 Clear virtual machines from the list on the specified physical machine\n")
		fmt.Printf("./kmanager -c host-remove -host hostIP -machine hostName\n")
		fmt.Printf("5 Obtain physical file information generated by a certain host\n")
		fmt.Printf("./kmanager -c disk-path -host hostIP -machine hostName\n")
		fmt.Printf("Generate a disk information file starting with the current host name\n in the info directory. After clearing the virtual machine from the list, the actual physical files can be deleted based on this information.\n")
		fmt.Printf("6 Generate Snapshot\n")
		fmt.Printf("./kmanager -c snapshot-create -host hostIP -machine hostName\n")
		fmt.Printf("7 Display the existing snapshot list of a virtual host\n")
		fmt.Printf("./kmanager -c snapshot-create -host hostIP -machine hostName\n")
		fmt.Printf("8 Restore the state of the virtual host to a snapshot\n")
		fmt.Printf("./kmanager -c snapshot-revert -host hostIP -machine hostName -snapshot snapshotName\n")
		fmt.Printf("9 Delete snapshot\n")
		fmt.Printf("./kmanager -c snapshot-drop -host hostIP -machine hostName -snapshot snapshotName\n")
		fmt.Printf("Only by deleting all snapshots can this virtual host be deleted.\n")
		fmt.Printf("\n")
	}
	
	if command == "source-list"{
		var x86_host_list string
		var arm_host_list string
		var disk_path_list string
		var iso_path_list string
		var templates_path_list string
		var x86_templates_list string
		var arm_templates_list string
		var x86_iso_list string
		var arm_iso_list string

		var source_list []string = load.Loadproperties("kvmproperties")
		for i,v := range  source_list{
			if i == 0 {
			x86_host_list = strings.Split(v,":")[1]
			fmt.Println("x86_host_list : "+x86_host_list)
		}
			if i == 1 {
			arm_host_list = strings.Split(v,":")[1]
			fmt.Println("arm_host_list : "+arm_host_list)
		}
			if i == 2 {
			disk_path_list = strings.Split(v,":")[1]
			fmt.Println("disk_path_list : "+disk_path_list)
		}
			if i == 3 {
			iso_path_list = strings.Split(v,":")[1]
			fmt.Println("iso_path_list : "+iso_path_list)
		}
			if i == 4 {
			templates_path_list = strings.Split(v,":")[1]
			fmt.Println("templates_path_list : "+templates_path_list)
		}
			if i == 5 {
			x86_templates_list = strings.Split(v,":")[1]
			fmt.Println("x86_templates_list : "+x86_templates_list)
		}
			if i == 6 {
			arm_templates_list = strings.Split(v,":")[1]
			fmt.Println("arm_templates_list : "+arm_templates_list)
		}
			if i == 7 {
			x86_iso_list = strings.Split(v,":")[1]
			fmt.Println("x86_iso_list : "+x86_iso_list)
		}
			if i == 8 {
			arm_iso_list = strings.Split(v,":")[1]
			fmt.Println("arm_iso_list : "+arm_iso_list)
		}
		}
	}
	
	if command == "host-list-running"{
		local.Listhost(host,"running")
	}
	if command == "host-list-all"{
		local.Listhost(host,"all")
	}
	
	if command == "host-start"{
		local.Starthost(host,machine)
	}
	
	if command == "host-stop"{
		local.Stophost(host,machine)
	}
	
	if command == "host-remove"{
		local.Removehost(host,machine)
	}
	
	if command == "disk-path"{
		local.FetchDiskPath(host,machine)
	}
	
	if command == "snapshot-create"{
		local.Createsnapshot(host,machine)
	}
	if command == "snapshot-list"{
		local.Listsnapshot(host,machine)
	}
	if command == "snapshot-drop"{
		local.Dropsnapshot(host,machine,snapshot)
	}
	if command == "snapshot-revert"{
		local.Revertsnapshot(host,machine,snapshot)
	}
	
	if framework == "x86"{
		fmt.Println("current framework is : x86")
		
		var x86_host_list string
		var temp_list []string = make([]string,4)
		var source_list []string = load.Loadproperties("kvmproperties")
		for i,v := range  source_list{
			if i == 0 {
				x86_host_list = strings.Split(v,":")[1]
				fmt.Println("x86_host_list : "+x86_host_list)
			}
		}
		temp_list = strings.Split(x86_host_list,",")
		status := "f"
		for _,v := range temp_list{
			if v == host{
				status = "t"
				playbook = v+":x86"
			}
		}
		if status == "f"{
			fmt.Println("user input x86 host is not include the host list")
		}
		if status == "t"{
			fmt.Println("user input x86 host is include the host list")
			if method == "NEW"{
				fmt.Println("new x86 install")
				var temp_disk_path string
				var source_list []string = load.Loadproperties("kvmproperties")
				var iso_path string
				var iso_file string
				for i,v := range  source_list{
					if i == 2 {
//						fmt.Println(v)
						temp_disk_path = strings.Split(v,":")[1]
						
					}
					if i == 3{
						iso_path = strings.Split(v,":")[1]
						fmt.Println("need the iso path is : "+iso_path)
					}
					if i == 7{
						iso_file = strings.Split(v,":")[1]
					}
				}
				for _,v := range strings.Split(temp_disk_path,","){
					if v == path{
						fmt.Println("distribute on："+path)
					}
				}
				for i,v := range strings.Split(iso_file,","){
					if strconv.Itoa(i) == source{
						fmt.Println("new install os is : "+v)
					}
				}
				
				local.GeneralPlayBook("要写入的内容")
			}
			if method == "clone"{
				fmt.Println("copy from x86 existing")
				var temp_disk_path string
				var source_list []string = load.Loadproperties("kvmproperties")
				var templates_path string
				var templates_file string
				for i,v := range  source_list{
					if i == 2 {
						temp_disk_path = strings.Split(v,":")[1]
						
					}
					if i == 4{
						templates_path = strings.Split(v,":")[1]
						fmt.Println("templates_path is : "+templates_path)
//						playbook=templates_path+":"+playbook
					}
					if i == 5{
						templates_file = strings.Split(v,":")[1]
						fmt.Println("templates_file is : "+templates_file)
					}
				}
				for _,v := range strings.Split(temp_disk_path,","){
					if v == path{
						fmt.Println("distribute on："+path)
//						playbook=path+":"+playbook
					}
				}
				for i,v := range strings.Split(templates_file,","){
					if strconv.Itoa(i) == source{
						fmt.Println("new copy os is : "+v)
						playbook=v+":"+playbook
					}
				}
//				fmt.Println(playbook)
				local.GeneralPlayBook(machine+":"+playbook)
				playbook=machine+":"+playbook
				local.Clone(strings.Split(playbook,":")[2],strings.Split(playbook,":")[1],strings.Split(playbook,":")[0])
			}
		}

	}
	if framework == "arm"{
		fmt.Println("current framework is : arm")
		
		var arm_host_list string
		var temp_list []string = make([]string,4)
		var source_list []string = load.Loadproperties("kvmproperties")
		for i,v := range  source_list{
			if i == 1 {
				arm_host_list = strings.Split(v,":")[1]
				fmt.Println("arm_host_list : "+arm_host_list)
			}
		}
		temp_list = strings.Split(arm_host_list,",")
		status := "f"
		for _,v := range temp_list{
			if v == host{
				status = "t"
			}
		}
		if status == "f"{
			fmt.Println("user input arm host is not include the host list")
		}
		if status == "t"{
			fmt.Println("user input arm host is include the host list")
			if method == "NEW"{
				fmt.Println("new arm install")
				var temp_disk_path string
				var source_list []string = load.Loadproperties("kvmproperties")
				var iso_path string
				var iso_file string
				for i,v := range  source_list{
					if i == 2 {
						temp_disk_path = strings.Split(v,":")[1]
						
					}
					if i == 3{
						iso_path = strings.Split(v,":")[1]
						fmt.Println("need the iso path is : "+iso_path)
					}
					if i == 8{
						iso_file = strings.Split(v,":")[1]
					}
				}
				for _,v := range strings.Split(temp_disk_path,","){
					if v == path{
						fmt.Println("distribute on："+path)
					}
				}
				for i,v := range strings.Split(iso_file,","){
					if strconv.Itoa(i) == source{
						fmt.Println("new install os is : "+v)
					}
				}
				
			}
			if method == "clone"{
				fmt.Println("copy from arm existing")
				var temp_disk_path string
				var source_list []string = load.Loadproperties("kvmproperties")
				var templates_path string
				var templates_file string
				for i,v := range  source_list{
					if i == 2 {
						temp_disk_path = strings.Split(v,":")[1]
						
					}
					if i == 4{
						templates_path = strings.Split(v,":")[1]
						fmt.Println("need the copy path is : "+templates_path)
					}
					if i == 6{
						templates_file = strings.Split(v,":")[1]
					}
				}
				for _,v := range strings.Split(temp_disk_path,","){
					if v == path{
						fmt.Println("distribute on："+path)
					}
				}
				for i,v := range strings.Split(templates_file,","){
					if strconv.Itoa(i) == source{
						fmt.Println("new copy os is : "+v)
					}
				}
			}
		}
	}
	
}